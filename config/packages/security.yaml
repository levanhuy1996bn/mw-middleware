security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        Endertech\EcommerceMiddlewareUserAdminBundle\Entity\User: 'auto'
    role_hierarchy:
        ROLE_ADMIN: [ROLE_SONATA_ADMIN, ROLE_USER]
        ROLE_SUPER_ADMIN: [ROLE_SONATA_ADMIN, ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        #users_in_memory: { memory: null }
        sonata_userbundle:
            id: sonata.user.user_provider.username_email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            pattern: /admin(.*)
            context: user
            form_login:
                provider: sonata_userbundle
                login_path: /admin/login
                use_forward: false
                check_path: /admin/login_check
                failure_path: null
                always_use_default_target_path: true
                default_target_path: /admin/dashboard
            logout:
                path: /admin/logout
                target: /admin/login
            webauthn:
                authentication:
                    routes:
                        options_path: /admin/assertion/options
                        result_path: /admin/assertion
        main:
#            lazy: true
#            provider: users_in_memory
            pattern: .*
            context: user
            switch_user: true
            form_login:
                provider: sonata_userbundle
                login_path: /login
                use_forward: false
                check_path: /login_check
                failure_path: null
            logout: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # Admin login page needs to be accessed without credential
        - { path: ^/admin/login$, role: PUBLIC_ACCESS }
        - { path: ^/admin/logout$, role: PUBLIC_ACCESS }
        - { path: ^/admin/login_check$, role: PUBLIC_ACCESS }
        - { path: ^/admin/resetting, role: PUBLIC_ACCESS }
        - { path: ^/admin/assertion, role: PUBLIC_ACCESS, requires_channel: https }
        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
        - { path: ^/.*, role: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
